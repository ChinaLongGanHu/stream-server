/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.to8to.userevent.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class UserEvent implements org.apache.thrift.TBase<UserEvent, UserEvent._Fields>, java.io.Serializable, Cloneable, Comparable<UserEvent> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserEvent");

  private static final org.apache.thrift.protocol.TField VT_FIELD_DESC = new org.apache.thrift.protocol.TField("vt", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ET_FIELD_DESC = new org.apache.thrift.protocol.TField("et", org.apache.thrift.protocol.TType.I16, (short)2);
  private static final org.apache.thrift.protocol.TField EN_FIELD_DESC = new org.apache.thrift.protocol.TField("en", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField VR_FIELD_DESC = new org.apache.thrift.protocol.TField("vr", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CI_FIELD_DESC = new org.apache.thrift.protocol.TField("ci", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UserEventStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UserEventTupleSchemeFactory());
  }

  public String vt; // required
  public short et; // required
  public String en; // required
  public String vr; // required
  public String ci; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    VT((short)1, "vt"),
    ET((short)2, "et"),
    EN((short)3, "en"),
    VR((short)4, "vr"),
    CI((short)5, "ci");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // VT
          return VT;
        case 2: // ET
          return ET;
        case 3: // EN
          return EN;
        case 4: // VR
          return VR;
        case 5: // CI
          return CI;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ET_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.VT, new org.apache.thrift.meta_data.FieldMetaData("vt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ET, new org.apache.thrift.meta_data.FieldMetaData("et", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.EN, new org.apache.thrift.meta_data.FieldMetaData("en", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VR, new org.apache.thrift.meta_data.FieldMetaData("vr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CI, new org.apache.thrift.meta_data.FieldMetaData("ci", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserEvent.class, metaDataMap);
  }

  public UserEvent() {
  }

  public UserEvent(
    String vt,
    short et,
    String en,
    String vr,
    String ci)
  {
    this();
    this.vt = vt;
    this.et = et;
    setEtIsSet(true);
    this.en = en;
    this.vr = vr;
    this.ci = ci;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserEvent(UserEvent other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetVt()) {
      this.vt = other.vt;
    }
    this.et = other.et;
    if (other.isSetEn()) {
      this.en = other.en;
    }
    if (other.isSetVr()) {
      this.vr = other.vr;
    }
    if (other.isSetCi()) {
      this.ci = other.ci;
    }
  }

  public UserEvent deepCopy() {
    return new UserEvent(this);
  }

  @Override
  public void clear() {
    this.vt = null;
    setEtIsSet(false);
    this.et = 0;
    this.en = null;
    this.vr = null;
    this.ci = null;
  }

  public String getVt() {
    return this.vt;
  }

  public UserEvent setVt(String vt) {
    this.vt = vt;
    return this;
  }

  public void unsetVt() {
    this.vt = null;
  }

  /** Returns true if field vt is set (has been assigned a value) and false otherwise */
  public boolean isSetVt() {
    return this.vt != null;
  }

  public void setVtIsSet(boolean value) {
    if (!value) {
      this.vt = null;
    }
  }

  public short getEt() {
    return this.et;
  }

  public UserEvent setEt(short et) {
    this.et = et;
    setEtIsSet(true);
    return this;
  }

  public void unsetEt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ET_ISSET_ID);
  }

  /** Returns true if field et is set (has been assigned a value) and false otherwise */
  public boolean isSetEt() {
    return EncodingUtils.testBit(__isset_bitfield, __ET_ISSET_ID);
  }

  public void setEtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ET_ISSET_ID, value);
  }

  public String getEn() {
    return this.en;
  }

  public UserEvent setEn(String en) {
    this.en = en;
    return this;
  }

  public void unsetEn() {
    this.en = null;
  }

  /** Returns true if field en is set (has been assigned a value) and false otherwise */
  public boolean isSetEn() {
    return this.en != null;
  }

  public void setEnIsSet(boolean value) {
    if (!value) {
      this.en = null;
    }
  }

  public String getVr() {
    return this.vr;
  }

  public UserEvent setVr(String vr) {
    this.vr = vr;
    return this;
  }

  public void unsetVr() {
    this.vr = null;
  }

  /** Returns true if field vr is set (has been assigned a value) and false otherwise */
  public boolean isSetVr() {
    return this.vr != null;
  }

  public void setVrIsSet(boolean value) {
    if (!value) {
      this.vr = null;
    }
  }

  public String getCi() {
    return this.ci;
  }

  public UserEvent setCi(String ci) {
    this.ci = ci;
    return this;
  }

  public void unsetCi() {
    this.ci = null;
  }

  /** Returns true if field ci is set (has been assigned a value) and false otherwise */
  public boolean isSetCi() {
    return this.ci != null;
  }

  public void setCiIsSet(boolean value) {
    if (!value) {
      this.ci = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case VT:
      if (value == null) {
        unsetVt();
      } else {
        setVt((String)value);
      }
      break;

    case ET:
      if (value == null) {
        unsetEt();
      } else {
        setEt((Short)value);
      }
      break;

    case EN:
      if (value == null) {
        unsetEn();
      } else {
        setEn((String)value);
      }
      break;

    case VR:
      if (value == null) {
        unsetVr();
      } else {
        setVr((String)value);
      }
      break;

    case CI:
      if (value == null) {
        unsetCi();
      } else {
        setCi((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case VT:
      return getVt();

    case ET:
      return Short.valueOf(getEt());

    case EN:
      return getEn();

    case VR:
      return getVr();

    case CI:
      return getCi();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case VT:
      return isSetVt();
    case ET:
      return isSetEt();
    case EN:
      return isSetEn();
    case VR:
      return isSetVr();
    case CI:
      return isSetCi();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UserEvent)
      return this.equals((UserEvent)that);
    return false;
  }

  public boolean equals(UserEvent that) {
    if (that == null)
      return false;

    boolean this_present_vt = true && this.isSetVt();
    boolean that_present_vt = true && that.isSetVt();
    if (this_present_vt || that_present_vt) {
      if (!(this_present_vt && that_present_vt))
        return false;
      if (!this.vt.equals(that.vt))
        return false;
    }

    boolean this_present_et = true;
    boolean that_present_et = true;
    if (this_present_et || that_present_et) {
      if (!(this_present_et && that_present_et))
        return false;
      if (this.et != that.et)
        return false;
    }

    boolean this_present_en = true && this.isSetEn();
    boolean that_present_en = true && that.isSetEn();
    if (this_present_en || that_present_en) {
      if (!(this_present_en && that_present_en))
        return false;
      if (!this.en.equals(that.en))
        return false;
    }

    boolean this_present_vr = true && this.isSetVr();
    boolean that_present_vr = true && that.isSetVr();
    if (this_present_vr || that_present_vr) {
      if (!(this_present_vr && that_present_vr))
        return false;
      if (!this.vr.equals(that.vr))
        return false;
    }

    boolean this_present_ci = true && this.isSetCi();
    boolean that_present_ci = true && that.isSetCi();
    if (this_present_ci || that_present_ci) {
      if (!(this_present_ci && that_present_ci))
        return false;
      if (!this.ci.equals(that.ci))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(UserEvent other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetVt()).compareTo(other.isSetVt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vt, other.vt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEt()).compareTo(other.isSetEt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.et, other.et);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEn()).compareTo(other.isSetEn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.en, other.en);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVr()).compareTo(other.isSetVr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vr, other.vr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCi()).compareTo(other.isSetCi());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCi()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ci, other.ci);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UserEvent(");
    boolean first = true;

    sb.append("vt:");
    if (this.vt == null) {
      sb.append("null");
    } else {
      sb.append(this.vt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("et:");
    sb.append(this.et);
    first = false;
    if (!first) sb.append(", ");
    sb.append("en:");
    if (this.en == null) {
      sb.append("null");
    } else {
      sb.append(this.en);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("vr:");
    if (this.vr == null) {
      sb.append("null");
    } else {
      sb.append(this.vr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ci:");
    if (this.ci == null) {
      sb.append("null");
    } else {
      sb.append(this.ci);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserEventStandardSchemeFactory implements SchemeFactory {
    public UserEventStandardScheme getScheme() {
      return new UserEventStandardScheme();
    }
  }

  private static class UserEventStandardScheme extends StandardScheme<UserEvent> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserEvent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // VT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.vt = iprot.readString();
              struct.setVtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ET
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.et = iprot.readI16();
              struct.setEtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.en = iprot.readString();
              struct.setEnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // VR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.vr = iprot.readString();
              struct.setVrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CI
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ci = iprot.readString();
              struct.setCiIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserEvent struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.vt != null) {
        oprot.writeFieldBegin(VT_FIELD_DESC);
        oprot.writeString(struct.vt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ET_FIELD_DESC);
      oprot.writeI16(struct.et);
      oprot.writeFieldEnd();
      if (struct.en != null) {
        oprot.writeFieldBegin(EN_FIELD_DESC);
        oprot.writeString(struct.en);
        oprot.writeFieldEnd();
      }
      if (struct.vr != null) {
        oprot.writeFieldBegin(VR_FIELD_DESC);
        oprot.writeString(struct.vr);
        oprot.writeFieldEnd();
      }
      if (struct.ci != null) {
        oprot.writeFieldBegin(CI_FIELD_DESC);
        oprot.writeString(struct.ci);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserEventTupleSchemeFactory implements SchemeFactory {
    public UserEventTupleScheme getScheme() {
      return new UserEventTupleScheme();
    }
  }

  private static class UserEventTupleScheme extends TupleScheme<UserEvent> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UserEvent struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetVt()) {
        optionals.set(0);
      }
      if (struct.isSetEt()) {
        optionals.set(1);
      }
      if (struct.isSetEn()) {
        optionals.set(2);
      }
      if (struct.isSetVr()) {
        optionals.set(3);
      }
      if (struct.isSetCi()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetVt()) {
        oprot.writeString(struct.vt);
      }
      if (struct.isSetEt()) {
        oprot.writeI16(struct.et);
      }
      if (struct.isSetEn()) {
        oprot.writeString(struct.en);
      }
      if (struct.isSetVr()) {
        oprot.writeString(struct.vr);
      }
      if (struct.isSetCi()) {
        oprot.writeString(struct.ci);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UserEvent struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.vt = iprot.readString();
        struct.setVtIsSet(true);
      }
      if (incoming.get(1)) {
        struct.et = iprot.readI16();
        struct.setEtIsSet(true);
      }
      if (incoming.get(2)) {
        struct.en = iprot.readString();
        struct.setEnIsSet(true);
      }
      if (incoming.get(3)) {
        struct.vr = iprot.readString();
        struct.setVrIsSet(true);
      }
      if (incoming.get(4)) {
        struct.ci = iprot.readString();
        struct.setCiIsSet(true);
      }
    }
  }

}

