/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.to8to.userevent.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PutLogReq implements org.apache.thrift.TBase<PutLogReq, PutLogReq._Fields>, java.io.Serializable, Cloneable, Comparable<PutLogReq> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PutLogReq");

  private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CID_FIELD_DESC = new org.apache.thrift.protocol.TField("cid", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SID_FIELD_DESC = new org.apache.thrift.protocol.TField("sid", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField UL_FIELD_DESC = new org.apache.thrift.protocol.TField("ul", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField IP_FIELD_DESC = new org.apache.thrift.protocol.TField("ip", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField OSV_FIELD_DESC = new org.apache.thrift.protocol.TField("osv", org.apache.thrift.protocol.TType.I16, (short)6);
  private static final org.apache.thrift.protocol.TField OST_FIELD_DESC = new org.apache.thrift.protocol.TField("ost", org.apache.thrift.protocol.TType.I16, (short)7);
  private static final org.apache.thrift.protocol.TField PN_FIELD_DESC = new org.apache.thrift.protocol.TField("pn", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField PV_FIELD_DESC = new org.apache.thrift.protocol.TField("pv", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField UA_FIELD_DESC = new org.apache.thrift.protocol.TField("ua", org.apache.thrift.protocol.TType.I16, (short)10);
  private static final org.apache.thrift.protocol.TField EV_FIELD_DESC = new org.apache.thrift.protocol.TField("ev", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField ST_FIELD_DESC = new org.apache.thrift.protocol.TField("st", org.apache.thrift.protocol.TType.I16, (short)12);
  private static final org.apache.thrift.protocol.TField NT_FIELD_DESC = new org.apache.thrift.protocol.TField("nt", org.apache.thrift.protocol.TType.I16, (short)13);
  private static final org.apache.thrift.protocol.TField DT_FIELD_DESC = new org.apache.thrift.protocol.TField("dt", org.apache.thrift.protocol.TType.I16, (short)14);
  private static final org.apache.thrift.protocol.TField DI_FIELD_DESC = new org.apache.thrift.protocol.TField("di", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField DS_FIELD_DESC = new org.apache.thrift.protocol.TField("ds", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField LT_FIELD_DESC = new org.apache.thrift.protocol.TField("lt", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField VF_FIELD_DESC = new org.apache.thrift.protocol.TField("vf", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.LIST, (short)19);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PutLogReqStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PutLogReqTupleSchemeFactory());
  }

  public String uid; // required
  public String cid; // required
  public String sid; // required
  public String ul; // required
  public String ip; // required
  public short osv; // required
  public short ost; // required
  public String pn; // required
  public String pv; // required
  public short ua; // required
  public String ev; // required
  public short st; // required
  public short nt; // required
  public short dt; // required
  public String di; // required
  public String ds; // required
  public String lt; // required
  public String vf; // required
  public List<UserEvent> e; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    UID((short)1, "uid"),
    CID((short)2, "cid"),
    SID((short)3, "sid"),
    UL((short)4, "ul"),
    IP((short)5, "ip"),
    OSV((short)6, "osv"),
    OST((short)7, "ost"),
    PN((short)8, "pn"),
    PV((short)9, "pv"),
    UA((short)10, "ua"),
    EV((short)11, "ev"),
    ST((short)12, "st"),
    NT((short)13, "nt"),
    DT((short)14, "dt"),
    DI((short)15, "di"),
    DS((short)16, "ds"),
    LT((short)17, "lt"),
    VF((short)18, "vf"),
    E((short)19, "e");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UID
          return UID;
        case 2: // CID
          return CID;
        case 3: // SID
          return SID;
        case 4: // UL
          return UL;
        case 5: // IP
          return IP;
        case 6: // OSV
          return OSV;
        case 7: // OST
          return OST;
        case 8: // PN
          return PN;
        case 9: // PV
          return PV;
        case 10: // UA
          return UA;
        case 11: // EV
          return EV;
        case 12: // ST
          return ST;
        case 13: // NT
          return NT;
        case 14: // DT
          return DT;
        case 15: // DI
          return DI;
        case 16: // DS
          return DS;
        case 17: // LT
          return LT;
        case 18: // VF
          return VF;
        case 19: // E
          return E;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __OSV_ISSET_ID = 0;
  private static final int __OST_ISSET_ID = 1;
  private static final int __UA_ISSET_ID = 2;
  private static final int __ST_ISSET_ID = 3;
  private static final int __NT_ISSET_ID = 4;
  private static final int __DT_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CID, new org.apache.thrift.meta_data.FieldMetaData("cid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SID, new org.apache.thrift.meta_data.FieldMetaData("sid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UL, new org.apache.thrift.meta_data.FieldMetaData("ul", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IP, new org.apache.thrift.meta_data.FieldMetaData("ip", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OSV, new org.apache.thrift.meta_data.FieldMetaData("osv", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.OST, new org.apache.thrift.meta_data.FieldMetaData("ost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.PN, new org.apache.thrift.meta_data.FieldMetaData("pn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PV, new org.apache.thrift.meta_data.FieldMetaData("pv", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UA, new org.apache.thrift.meta_data.FieldMetaData("ua", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.EV, new org.apache.thrift.meta_data.FieldMetaData("ev", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ST, new org.apache.thrift.meta_data.FieldMetaData("st", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.NT, new org.apache.thrift.meta_data.FieldMetaData("nt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.DT, new org.apache.thrift.meta_data.FieldMetaData("dt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.DI, new org.apache.thrift.meta_data.FieldMetaData("di", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DS, new org.apache.thrift.meta_data.FieldMetaData("ds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LT, new org.apache.thrift.meta_data.FieldMetaData("lt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VF, new org.apache.thrift.meta_data.FieldMetaData("vf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserEvent.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PutLogReq.class, metaDataMap);
  }

  public PutLogReq() {
  }

  public PutLogReq(
    String uid,
    String cid,
    String sid,
    String ul,
    String ip,
    short osv,
    short ost,
    String pn,
    String pv,
    short ua,
    String ev,
    short st,
    short nt,
    short dt,
    String di,
    String ds,
    String lt,
    String vf,
    List<UserEvent> e)
  {
    this();
    this.uid = uid;
    this.cid = cid;
    this.sid = sid;
    this.ul = ul;
    this.ip = ip;
    this.osv = osv;
    setOsvIsSet(true);
    this.ost = ost;
    setOstIsSet(true);
    this.pn = pn;
    this.pv = pv;
    this.ua = ua;
    setUaIsSet(true);
    this.ev = ev;
    this.st = st;
    setStIsSet(true);
    this.nt = nt;
    setNtIsSet(true);
    this.dt = dt;
    setDtIsSet(true);
    this.di = di;
    this.ds = ds;
    this.lt = lt;
    this.vf = vf;
    this.e = e;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PutLogReq(PutLogReq other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetUid()) {
      this.uid = other.uid;
    }
    if (other.isSetCid()) {
      this.cid = other.cid;
    }
    if (other.isSetSid()) {
      this.sid = other.sid;
    }
    if (other.isSetUl()) {
      this.ul = other.ul;
    }
    if (other.isSetIp()) {
      this.ip = other.ip;
    }
    this.osv = other.osv;
    this.ost = other.ost;
    if (other.isSetPn()) {
      this.pn = other.pn;
    }
    if (other.isSetPv()) {
      this.pv = other.pv;
    }
    this.ua = other.ua;
    if (other.isSetEv()) {
      this.ev = other.ev;
    }
    this.st = other.st;
    this.nt = other.nt;
    this.dt = other.dt;
    if (other.isSetDi()) {
      this.di = other.di;
    }
    if (other.isSetDs()) {
      this.ds = other.ds;
    }
    if (other.isSetLt()) {
      this.lt = other.lt;
    }
    if (other.isSetVf()) {
      this.vf = other.vf;
    }
    if (other.isSetE()) {
      List<UserEvent> __this__e = new ArrayList<UserEvent>(other.e.size());
      for (UserEvent other_element : other.e) {
        __this__e.add(new UserEvent(other_element));
      }
      this.e = __this__e;
    }
  }

  public PutLogReq deepCopy() {
    return new PutLogReq(this);
  }

  @Override
  public void clear() {
    this.uid = null;
    this.cid = null;
    this.sid = null;
    this.ul = null;
    this.ip = null;
    setOsvIsSet(false);
    this.osv = 0;
    setOstIsSet(false);
    this.ost = 0;
    this.pn = null;
    this.pv = null;
    setUaIsSet(false);
    this.ua = 0;
    this.ev = null;
    setStIsSet(false);
    this.st = 0;
    setNtIsSet(false);
    this.nt = 0;
    setDtIsSet(false);
    this.dt = 0;
    this.di = null;
    this.ds = null;
    this.lt = null;
    this.vf = null;
    this.e = null;
  }

  public String getUid() {
    return this.uid;
  }

  public PutLogReq setUid(String uid) {
    this.uid = uid;
    return this;
  }

  public void unsetUid() {
    this.uid = null;
  }

  /** Returns true if field uid is set (has been assigned a value) and false otherwise */
  public boolean isSetUid() {
    return this.uid != null;
  }

  public void setUidIsSet(boolean value) {
    if (!value) {
      this.uid = null;
    }
  }

  public String getCid() {
    return this.cid;
  }

  public PutLogReq setCid(String cid) {
    this.cid = cid;
    return this;
  }

  public void unsetCid() {
    this.cid = null;
  }

  /** Returns true if field cid is set (has been assigned a value) and false otherwise */
  public boolean isSetCid() {
    return this.cid != null;
  }

  public void setCidIsSet(boolean value) {
    if (!value) {
      this.cid = null;
    }
  }

  public String getSid() {
    return this.sid;
  }

  public PutLogReq setSid(String sid) {
    this.sid = sid;
    return this;
  }

  public void unsetSid() {
    this.sid = null;
  }

  /** Returns true if field sid is set (has been assigned a value) and false otherwise */
  public boolean isSetSid() {
    return this.sid != null;
  }

  public void setSidIsSet(boolean value) {
    if (!value) {
      this.sid = null;
    }
  }

  public String getUl() {
    return this.ul;
  }

  public PutLogReq setUl(String ul) {
    this.ul = ul;
    return this;
  }

  public void unsetUl() {
    this.ul = null;
  }

  /** Returns true if field ul is set (has been assigned a value) and false otherwise */
  public boolean isSetUl() {
    return this.ul != null;
  }

  public void setUlIsSet(boolean value) {
    if (!value) {
      this.ul = null;
    }
  }

  public String getIp() {
    return this.ip;
  }

  public PutLogReq setIp(String ip) {
    this.ip = ip;
    return this;
  }

  public void unsetIp() {
    this.ip = null;
  }

  /** Returns true if field ip is set (has been assigned a value) and false otherwise */
  public boolean isSetIp() {
    return this.ip != null;
  }

  public void setIpIsSet(boolean value) {
    if (!value) {
      this.ip = null;
    }
  }

  public short getOsv() {
    return this.osv;
  }

  public PutLogReq setOsv(short osv) {
    this.osv = osv;
    setOsvIsSet(true);
    return this;
  }

  public void unsetOsv() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OSV_ISSET_ID);
  }

  /** Returns true if field osv is set (has been assigned a value) and false otherwise */
  public boolean isSetOsv() {
    return EncodingUtils.testBit(__isset_bitfield, __OSV_ISSET_ID);
  }

  public void setOsvIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OSV_ISSET_ID, value);
  }

  public short getOst() {
    return this.ost;
  }

  public PutLogReq setOst(short ost) {
    this.ost = ost;
    setOstIsSet(true);
    return this;
  }

  public void unsetOst() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OST_ISSET_ID);
  }

  /** Returns true if field ost is set (has been assigned a value) and false otherwise */
  public boolean isSetOst() {
    return EncodingUtils.testBit(__isset_bitfield, __OST_ISSET_ID);
  }

  public void setOstIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OST_ISSET_ID, value);
  }

  public String getPn() {
    return this.pn;
  }

  public PutLogReq setPn(String pn) {
    this.pn = pn;
    return this;
  }

  public void unsetPn() {
    this.pn = null;
  }

  /** Returns true if field pn is set (has been assigned a value) and false otherwise */
  public boolean isSetPn() {
    return this.pn != null;
  }

  public void setPnIsSet(boolean value) {
    if (!value) {
      this.pn = null;
    }
  }

  public String getPv() {
    return this.pv;
  }

  public PutLogReq setPv(String pv) {
    this.pv = pv;
    return this;
  }

  public void unsetPv() {
    this.pv = null;
  }

  /** Returns true if field pv is set (has been assigned a value) and false otherwise */
  public boolean isSetPv() {
    return this.pv != null;
  }

  public void setPvIsSet(boolean value) {
    if (!value) {
      this.pv = null;
    }
  }

  public short getUa() {
    return this.ua;
  }

  public PutLogReq setUa(short ua) {
    this.ua = ua;
    setUaIsSet(true);
    return this;
  }

  public void unsetUa() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UA_ISSET_ID);
  }

  /** Returns true if field ua is set (has been assigned a value) and false otherwise */
  public boolean isSetUa() {
    return EncodingUtils.testBit(__isset_bitfield, __UA_ISSET_ID);
  }

  public void setUaIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UA_ISSET_ID, value);
  }

  public String getEv() {
    return this.ev;
  }

  public PutLogReq setEv(String ev) {
    this.ev = ev;
    return this;
  }

  public void unsetEv() {
    this.ev = null;
  }

  /** Returns true if field ev is set (has been assigned a value) and false otherwise */
  public boolean isSetEv() {
    return this.ev != null;
  }

  public void setEvIsSet(boolean value) {
    if (!value) {
      this.ev = null;
    }
  }

  public short getSt() {
    return this.st;
  }

  public PutLogReq setSt(short st) {
    this.st = st;
    setStIsSet(true);
    return this;
  }

  public void unsetSt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ST_ISSET_ID);
  }

  /** Returns true if field st is set (has been assigned a value) and false otherwise */
  public boolean isSetSt() {
    return EncodingUtils.testBit(__isset_bitfield, __ST_ISSET_ID);
  }

  public void setStIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ST_ISSET_ID, value);
  }

  public short getNt() {
    return this.nt;
  }

  public PutLogReq setNt(short nt) {
    this.nt = nt;
    setNtIsSet(true);
    return this;
  }

  public void unsetNt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NT_ISSET_ID);
  }

  /** Returns true if field nt is set (has been assigned a value) and false otherwise */
  public boolean isSetNt() {
    return EncodingUtils.testBit(__isset_bitfield, __NT_ISSET_ID);
  }

  public void setNtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NT_ISSET_ID, value);
  }

  public short getDt() {
    return this.dt;
  }

  public PutLogReq setDt(short dt) {
    this.dt = dt;
    setDtIsSet(true);
    return this;
  }

  public void unsetDt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DT_ISSET_ID);
  }

  /** Returns true if field dt is set (has been assigned a value) and false otherwise */
  public boolean isSetDt() {
    return EncodingUtils.testBit(__isset_bitfield, __DT_ISSET_ID);
  }

  public void setDtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DT_ISSET_ID, value);
  }

  public String getDi() {
    return this.di;
  }

  public PutLogReq setDi(String di) {
    this.di = di;
    return this;
  }

  public void unsetDi() {
    this.di = null;
  }

  /** Returns true if field di is set (has been assigned a value) and false otherwise */
  public boolean isSetDi() {
    return this.di != null;
  }

  public void setDiIsSet(boolean value) {
    if (!value) {
      this.di = null;
    }
  }

  public String getDs() {
    return this.ds;
  }

  public PutLogReq setDs(String ds) {
    this.ds = ds;
    return this;
  }

  public void unsetDs() {
    this.ds = null;
  }

  /** Returns true if field ds is set (has been assigned a value) and false otherwise */
  public boolean isSetDs() {
    return this.ds != null;
  }

  public void setDsIsSet(boolean value) {
    if (!value) {
      this.ds = null;
    }
  }

  public String getLt() {
    return this.lt;
  }

  public PutLogReq setLt(String lt) {
    this.lt = lt;
    return this;
  }

  public void unsetLt() {
    this.lt = null;
  }

  /** Returns true if field lt is set (has been assigned a value) and false otherwise */
  public boolean isSetLt() {
    return this.lt != null;
  }

  public void setLtIsSet(boolean value) {
    if (!value) {
      this.lt = null;
    }
  }

  public String getVf() {
    return this.vf;
  }

  public PutLogReq setVf(String vf) {
    this.vf = vf;
    return this;
  }

  public void unsetVf() {
    this.vf = null;
  }

  /** Returns true if field vf is set (has been assigned a value) and false otherwise */
  public boolean isSetVf() {
    return this.vf != null;
  }

  public void setVfIsSet(boolean value) {
    if (!value) {
      this.vf = null;
    }
  }

  public int getESize() {
    return (this.e == null) ? 0 : this.e.size();
  }

  public java.util.Iterator<UserEvent> getEIterator() {
    return (this.e == null) ? null : this.e.iterator();
  }

  public void addToE(UserEvent elem) {
    if (this.e == null) {
      this.e = new ArrayList<UserEvent>();
    }
    this.e.add(elem);
  }

  public List<UserEvent> getE() {
    return this.e;
  }

  public PutLogReq setE(List<UserEvent> e) {
    this.e = e;
    return this;
  }

  public void unsetE() {
    this.e = null;
  }

  /** Returns true if field e is set (has been assigned a value) and false otherwise */
  public boolean isSetE() {
    return this.e != null;
  }

  public void setEIsSet(boolean value) {
    if (!value) {
      this.e = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case UID:
      if (value == null) {
        unsetUid();
      } else {
        setUid((String)value);
      }
      break;

    case CID:
      if (value == null) {
        unsetCid();
      } else {
        setCid((String)value);
      }
      break;

    case SID:
      if (value == null) {
        unsetSid();
      } else {
        setSid((String)value);
      }
      break;

    case UL:
      if (value == null) {
        unsetUl();
      } else {
        setUl((String)value);
      }
      break;

    case IP:
      if (value == null) {
        unsetIp();
      } else {
        setIp((String)value);
      }
      break;

    case OSV:
      if (value == null) {
        unsetOsv();
      } else {
        setOsv((Short)value);
      }
      break;

    case OST:
      if (value == null) {
        unsetOst();
      } else {
        setOst((Short)value);
      }
      break;

    case PN:
      if (value == null) {
        unsetPn();
      } else {
        setPn((String)value);
      }
      break;

    case PV:
      if (value == null) {
        unsetPv();
      } else {
        setPv((String)value);
      }
      break;

    case UA:
      if (value == null) {
        unsetUa();
      } else {
        setUa((Short)value);
      }
      break;

    case EV:
      if (value == null) {
        unsetEv();
      } else {
        setEv((String)value);
      }
      break;

    case ST:
      if (value == null) {
        unsetSt();
      } else {
        setSt((Short)value);
      }
      break;

    case NT:
      if (value == null) {
        unsetNt();
      } else {
        setNt((Short)value);
      }
      break;

    case DT:
      if (value == null) {
        unsetDt();
      } else {
        setDt((Short)value);
      }
      break;

    case DI:
      if (value == null) {
        unsetDi();
      } else {
        setDi((String)value);
      }
      break;

    case DS:
      if (value == null) {
        unsetDs();
      } else {
        setDs((String)value);
      }
      break;

    case LT:
      if (value == null) {
        unsetLt();
      } else {
        setLt((String)value);
      }
      break;

    case VF:
      if (value == null) {
        unsetVf();
      } else {
        setVf((String)value);
      }
      break;

    case E:
      if (value == null) {
        unsetE();
      } else {
        setE((List<UserEvent>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case UID:
      return getUid();

    case CID:
      return getCid();

    case SID:
      return getSid();

    case UL:
      return getUl();

    case IP:
      return getIp();

    case OSV:
      return Short.valueOf(getOsv());

    case OST:
      return Short.valueOf(getOst());

    case PN:
      return getPn();

    case PV:
      return getPv();

    case UA:
      return Short.valueOf(getUa());

    case EV:
      return getEv();

    case ST:
      return Short.valueOf(getSt());

    case NT:
      return Short.valueOf(getNt());

    case DT:
      return Short.valueOf(getDt());

    case DI:
      return getDi();

    case DS:
      return getDs();

    case LT:
      return getLt();

    case VF:
      return getVf();

    case E:
      return getE();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case UID:
      return isSetUid();
    case CID:
      return isSetCid();
    case SID:
      return isSetSid();
    case UL:
      return isSetUl();
    case IP:
      return isSetIp();
    case OSV:
      return isSetOsv();
    case OST:
      return isSetOst();
    case PN:
      return isSetPn();
    case PV:
      return isSetPv();
    case UA:
      return isSetUa();
    case EV:
      return isSetEv();
    case ST:
      return isSetSt();
    case NT:
      return isSetNt();
    case DT:
      return isSetDt();
    case DI:
      return isSetDi();
    case DS:
      return isSetDs();
    case LT:
      return isSetLt();
    case VF:
      return isSetVf();
    case E:
      return isSetE();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PutLogReq)
      return this.equals((PutLogReq)that);
    return false;
  }

  public boolean equals(PutLogReq that) {
    if (that == null)
      return false;

    boolean this_present_uid = true && this.isSetUid();
    boolean that_present_uid = true && that.isSetUid();
    if (this_present_uid || that_present_uid) {
      if (!(this_present_uid && that_present_uid))
        return false;
      if (!this.uid.equals(that.uid))
        return false;
    }

    boolean this_present_cid = true && this.isSetCid();
    boolean that_present_cid = true && that.isSetCid();
    if (this_present_cid || that_present_cid) {
      if (!(this_present_cid && that_present_cid))
        return false;
      if (!this.cid.equals(that.cid))
        return false;
    }

    boolean this_present_sid = true && this.isSetSid();
    boolean that_present_sid = true && that.isSetSid();
    if (this_present_sid || that_present_sid) {
      if (!(this_present_sid && that_present_sid))
        return false;
      if (!this.sid.equals(that.sid))
        return false;
    }

    boolean this_present_ul = true && this.isSetUl();
    boolean that_present_ul = true && that.isSetUl();
    if (this_present_ul || that_present_ul) {
      if (!(this_present_ul && that_present_ul))
        return false;
      if (!this.ul.equals(that.ul))
        return false;
    }

    boolean this_present_ip = true && this.isSetIp();
    boolean that_present_ip = true && that.isSetIp();
    if (this_present_ip || that_present_ip) {
      if (!(this_present_ip && that_present_ip))
        return false;
      if (!this.ip.equals(that.ip))
        return false;
    }

    boolean this_present_osv = true;
    boolean that_present_osv = true;
    if (this_present_osv || that_present_osv) {
      if (!(this_present_osv && that_present_osv))
        return false;
      if (this.osv != that.osv)
        return false;
    }

    boolean this_present_ost = true;
    boolean that_present_ost = true;
    if (this_present_ost || that_present_ost) {
      if (!(this_present_ost && that_present_ost))
        return false;
      if (this.ost != that.ost)
        return false;
    }

    boolean this_present_pn = true && this.isSetPn();
    boolean that_present_pn = true && that.isSetPn();
    if (this_present_pn || that_present_pn) {
      if (!(this_present_pn && that_present_pn))
        return false;
      if (!this.pn.equals(that.pn))
        return false;
    }

    boolean this_present_pv = true && this.isSetPv();
    boolean that_present_pv = true && that.isSetPv();
    if (this_present_pv || that_present_pv) {
      if (!(this_present_pv && that_present_pv))
        return false;
      if (!this.pv.equals(that.pv))
        return false;
    }

    boolean this_present_ua = true;
    boolean that_present_ua = true;
    if (this_present_ua || that_present_ua) {
      if (!(this_present_ua && that_present_ua))
        return false;
      if (this.ua != that.ua)
        return false;
    }

    boolean this_present_ev = true && this.isSetEv();
    boolean that_present_ev = true && that.isSetEv();
    if (this_present_ev || that_present_ev) {
      if (!(this_present_ev && that_present_ev))
        return false;
      if (!this.ev.equals(that.ev))
        return false;
    }

    boolean this_present_st = true;
    boolean that_present_st = true;
    if (this_present_st || that_present_st) {
      if (!(this_present_st && that_present_st))
        return false;
      if (this.st != that.st)
        return false;
    }

    boolean this_present_nt = true;
    boolean that_present_nt = true;
    if (this_present_nt || that_present_nt) {
      if (!(this_present_nt && that_present_nt))
        return false;
      if (this.nt != that.nt)
        return false;
    }

    boolean this_present_dt = true;
    boolean that_present_dt = true;
    if (this_present_dt || that_present_dt) {
      if (!(this_present_dt && that_present_dt))
        return false;
      if (this.dt != that.dt)
        return false;
    }

    boolean this_present_di = true && this.isSetDi();
    boolean that_present_di = true && that.isSetDi();
    if (this_present_di || that_present_di) {
      if (!(this_present_di && that_present_di))
        return false;
      if (!this.di.equals(that.di))
        return false;
    }

    boolean this_present_ds = true && this.isSetDs();
    boolean that_present_ds = true && that.isSetDs();
    if (this_present_ds || that_present_ds) {
      if (!(this_present_ds && that_present_ds))
        return false;
      if (!this.ds.equals(that.ds))
        return false;
    }

    boolean this_present_lt = true && this.isSetLt();
    boolean that_present_lt = true && that.isSetLt();
    if (this_present_lt || that_present_lt) {
      if (!(this_present_lt && that_present_lt))
        return false;
      if (!this.lt.equals(that.lt))
        return false;
    }

    boolean this_present_vf = true && this.isSetVf();
    boolean that_present_vf = true && that.isSetVf();
    if (this_present_vf || that_present_vf) {
      if (!(this_present_vf && that_present_vf))
        return false;
      if (!this.vf.equals(that.vf))
        return false;
    }

    boolean this_present_e = true && this.isSetE();
    boolean that_present_e = true && that.isSetE();
    if (this_present_e || that_present_e) {
      if (!(this_present_e && that_present_e))
        return false;
      if (!this.e.equals(that.e))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(PutLogReq other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCid()).compareTo(other.isSetCid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cid, other.cid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSid()).compareTo(other.isSetSid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sid, other.sid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUl()).compareTo(other.isSetUl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ul, other.ul);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIp()).compareTo(other.isSetIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ip, other.ip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOsv()).compareTo(other.isSetOsv());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOsv()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.osv, other.osv);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOst()).compareTo(other.isSetOst());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOst()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ost, other.ost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPn()).compareTo(other.isSetPn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pn, other.pn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPv()).compareTo(other.isSetPv());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPv()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pv, other.pv);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUa()).compareTo(other.isSetUa());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUa()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ua, other.ua);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEv()).compareTo(other.isSetEv());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEv()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ev, other.ev);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSt()).compareTo(other.isSetSt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.st, other.st);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNt()).compareTo(other.isSetNt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nt, other.nt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDt()).compareTo(other.isSetDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dt, other.dt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDi()).compareTo(other.isSetDi());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDi()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.di, other.di);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDs()).compareTo(other.isSetDs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ds, other.ds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLt()).compareTo(other.isSetLt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lt, other.lt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVf()).compareTo(other.isSetVf());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVf()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vf, other.vf);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetE()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PutLogReq(");
    boolean first = true;

    sb.append("uid:");
    if (this.uid == null) {
      sb.append("null");
    } else {
      sb.append(this.uid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cid:");
    if (this.cid == null) {
      sb.append("null");
    } else {
      sb.append(this.cid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sid:");
    if (this.sid == null) {
      sb.append("null");
    } else {
      sb.append(this.sid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ul:");
    if (this.ul == null) {
      sb.append("null");
    } else {
      sb.append(this.ul);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ip:");
    if (this.ip == null) {
      sb.append("null");
    } else {
      sb.append(this.ip);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("osv:");
    sb.append(this.osv);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ost:");
    sb.append(this.ost);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pn:");
    if (this.pn == null) {
      sb.append("null");
    } else {
      sb.append(this.pn);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pv:");
    if (this.pv == null) {
      sb.append("null");
    } else {
      sb.append(this.pv);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ua:");
    sb.append(this.ua);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ev:");
    if (this.ev == null) {
      sb.append("null");
    } else {
      sb.append(this.ev);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("st:");
    sb.append(this.st);
    first = false;
    if (!first) sb.append(", ");
    sb.append("nt:");
    sb.append(this.nt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dt:");
    sb.append(this.dt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("di:");
    if (this.di == null) {
      sb.append("null");
    } else {
      sb.append(this.di);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ds:");
    if (this.ds == null) {
      sb.append("null");
    } else {
      sb.append(this.ds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lt:");
    if (this.lt == null) {
      sb.append("null");
    } else {
      sb.append(this.lt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("vf:");
    if (this.vf == null) {
      sb.append("null");
    } else {
      sb.append(this.vf);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("e:");
    if (this.e == null) {
      sb.append("null");
    } else {
      sb.append(this.e);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PutLogReqStandardSchemeFactory implements SchemeFactory {
    public PutLogReqStandardScheme getScheme() {
      return new PutLogReqStandardScheme();
    }
  }

  private static class PutLogReqStandardScheme extends StandardScheme<PutLogReq> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PutLogReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // UID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uid = iprot.readString();
              struct.setUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cid = iprot.readString();
              struct.setCidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sid = iprot.readString();
              struct.setSidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // UL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ul = iprot.readString();
              struct.setUlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ip = iprot.readString();
              struct.setIpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // OSV
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.osv = iprot.readI16();
              struct.setOsvIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // OST
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.ost = iprot.readI16();
              struct.setOstIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pn = iprot.readString();
              struct.setPnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PV
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pv = iprot.readString();
              struct.setPvIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // UA
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.ua = iprot.readI16();
              struct.setUaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // EV
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ev = iprot.readString();
              struct.setEvIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // ST
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.st = iprot.readI16();
              struct.setStIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // NT
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.nt = iprot.readI16();
              struct.setNtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // DT
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.dt = iprot.readI16();
              struct.setDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // DI
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.di = iprot.readString();
              struct.setDiIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // DS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ds = iprot.readString();
              struct.setDsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // LT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lt = iprot.readString();
              struct.setLtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // VF
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.vf = iprot.readString();
              struct.setVfIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // E
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.e = new ArrayList<UserEvent>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  UserEvent _elem2;
                  _elem2 = new UserEvent();
                  _elem2.read(iprot);
                  struct.e.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setEIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PutLogReq struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.uid != null) {
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeString(struct.uid);
        oprot.writeFieldEnd();
      }
      if (struct.cid != null) {
        oprot.writeFieldBegin(CID_FIELD_DESC);
        oprot.writeString(struct.cid);
        oprot.writeFieldEnd();
      }
      if (struct.sid != null) {
        oprot.writeFieldBegin(SID_FIELD_DESC);
        oprot.writeString(struct.sid);
        oprot.writeFieldEnd();
      }
      if (struct.ul != null) {
        oprot.writeFieldBegin(UL_FIELD_DESC);
        oprot.writeString(struct.ul);
        oprot.writeFieldEnd();
      }
      if (struct.ip != null) {
        oprot.writeFieldBegin(IP_FIELD_DESC);
        oprot.writeString(struct.ip);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OSV_FIELD_DESC);
      oprot.writeI16(struct.osv);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OST_FIELD_DESC);
      oprot.writeI16(struct.ost);
      oprot.writeFieldEnd();
      if (struct.pn != null) {
        oprot.writeFieldBegin(PN_FIELD_DESC);
        oprot.writeString(struct.pn);
        oprot.writeFieldEnd();
      }
      if (struct.pv != null) {
        oprot.writeFieldBegin(PV_FIELD_DESC);
        oprot.writeString(struct.pv);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(UA_FIELD_DESC);
      oprot.writeI16(struct.ua);
      oprot.writeFieldEnd();
      if (struct.ev != null) {
        oprot.writeFieldBegin(EV_FIELD_DESC);
        oprot.writeString(struct.ev);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ST_FIELD_DESC);
      oprot.writeI16(struct.st);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NT_FIELD_DESC);
      oprot.writeI16(struct.nt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DT_FIELD_DESC);
      oprot.writeI16(struct.dt);
      oprot.writeFieldEnd();
      if (struct.di != null) {
        oprot.writeFieldBegin(DI_FIELD_DESC);
        oprot.writeString(struct.di);
        oprot.writeFieldEnd();
      }
      if (struct.ds != null) {
        oprot.writeFieldBegin(DS_FIELD_DESC);
        oprot.writeString(struct.ds);
        oprot.writeFieldEnd();
      }
      if (struct.lt != null) {
        oprot.writeFieldBegin(LT_FIELD_DESC);
        oprot.writeString(struct.lt);
        oprot.writeFieldEnd();
      }
      if (struct.vf != null) {
        oprot.writeFieldBegin(VF_FIELD_DESC);
        oprot.writeString(struct.vf);
        oprot.writeFieldEnd();
      }
      if (struct.e != null) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.e.size()));
          for (UserEvent _iter3 : struct.e)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PutLogReqTupleSchemeFactory implements SchemeFactory {
    public PutLogReqTupleScheme getScheme() {
      return new PutLogReqTupleScheme();
    }
  }

  private static class PutLogReqTupleScheme extends TupleScheme<PutLogReq> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PutLogReq struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetUid()) {
        optionals.set(0);
      }
      if (struct.isSetCid()) {
        optionals.set(1);
      }
      if (struct.isSetSid()) {
        optionals.set(2);
      }
      if (struct.isSetUl()) {
        optionals.set(3);
      }
      if (struct.isSetIp()) {
        optionals.set(4);
      }
      if (struct.isSetOsv()) {
        optionals.set(5);
      }
      if (struct.isSetOst()) {
        optionals.set(6);
      }
      if (struct.isSetPn()) {
        optionals.set(7);
      }
      if (struct.isSetPv()) {
        optionals.set(8);
      }
      if (struct.isSetUa()) {
        optionals.set(9);
      }
      if (struct.isSetEv()) {
        optionals.set(10);
      }
      if (struct.isSetSt()) {
        optionals.set(11);
      }
      if (struct.isSetNt()) {
        optionals.set(12);
      }
      if (struct.isSetDt()) {
        optionals.set(13);
      }
      if (struct.isSetDi()) {
        optionals.set(14);
      }
      if (struct.isSetDs()) {
        optionals.set(15);
      }
      if (struct.isSetLt()) {
        optionals.set(16);
      }
      if (struct.isSetVf()) {
        optionals.set(17);
      }
      if (struct.isSetE()) {
        optionals.set(18);
      }
      oprot.writeBitSet(optionals, 19);
      if (struct.isSetUid()) {
        oprot.writeString(struct.uid);
      }
      if (struct.isSetCid()) {
        oprot.writeString(struct.cid);
      }
      if (struct.isSetSid()) {
        oprot.writeString(struct.sid);
      }
      if (struct.isSetUl()) {
        oprot.writeString(struct.ul);
      }
      if (struct.isSetIp()) {
        oprot.writeString(struct.ip);
      }
      if (struct.isSetOsv()) {
        oprot.writeI16(struct.osv);
      }
      if (struct.isSetOst()) {
        oprot.writeI16(struct.ost);
      }
      if (struct.isSetPn()) {
        oprot.writeString(struct.pn);
      }
      if (struct.isSetPv()) {
        oprot.writeString(struct.pv);
      }
      if (struct.isSetUa()) {
        oprot.writeI16(struct.ua);
      }
      if (struct.isSetEv()) {
        oprot.writeString(struct.ev);
      }
      if (struct.isSetSt()) {
        oprot.writeI16(struct.st);
      }
      if (struct.isSetNt()) {
        oprot.writeI16(struct.nt);
      }
      if (struct.isSetDt()) {
        oprot.writeI16(struct.dt);
      }
      if (struct.isSetDi()) {
        oprot.writeString(struct.di);
      }
      if (struct.isSetDs()) {
        oprot.writeString(struct.ds);
      }
      if (struct.isSetLt()) {
        oprot.writeString(struct.lt);
      }
      if (struct.isSetVf()) {
        oprot.writeString(struct.vf);
      }
      if (struct.isSetE()) {
        {
          oprot.writeI32(struct.e.size());
          for (UserEvent _iter4 : struct.e)
          {
            _iter4.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PutLogReq struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(19);
      if (incoming.get(0)) {
        struct.uid = iprot.readString();
        struct.setUidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cid = iprot.readString();
        struct.setCidIsSet(true);
      }
      if (incoming.get(2)) {
        struct.sid = iprot.readString();
        struct.setSidIsSet(true);
      }
      if (incoming.get(3)) {
        struct.ul = iprot.readString();
        struct.setUlIsSet(true);
      }
      if (incoming.get(4)) {
        struct.ip = iprot.readString();
        struct.setIpIsSet(true);
      }
      if (incoming.get(5)) {
        struct.osv = iprot.readI16();
        struct.setOsvIsSet(true);
      }
      if (incoming.get(6)) {
        struct.ost = iprot.readI16();
        struct.setOstIsSet(true);
      }
      if (incoming.get(7)) {
        struct.pn = iprot.readString();
        struct.setPnIsSet(true);
      }
      if (incoming.get(8)) {
        struct.pv = iprot.readString();
        struct.setPvIsSet(true);
      }
      if (incoming.get(9)) {
        struct.ua = iprot.readI16();
        struct.setUaIsSet(true);
      }
      if (incoming.get(10)) {
        struct.ev = iprot.readString();
        struct.setEvIsSet(true);
      }
      if (incoming.get(11)) {
        struct.st = iprot.readI16();
        struct.setStIsSet(true);
      }
      if (incoming.get(12)) {
        struct.nt = iprot.readI16();
        struct.setNtIsSet(true);
      }
      if (incoming.get(13)) {
        struct.dt = iprot.readI16();
        struct.setDtIsSet(true);
      }
      if (incoming.get(14)) {
        struct.di = iprot.readString();
        struct.setDiIsSet(true);
      }
      if (incoming.get(15)) {
        struct.ds = iprot.readString();
        struct.setDsIsSet(true);
      }
      if (incoming.get(16)) {
        struct.lt = iprot.readString();
        struct.setLtIsSet(true);
      }
      if (incoming.get(17)) {
        struct.vf = iprot.readString();
        struct.setVfIsSet(true);
      }
      if (incoming.get(18)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.e = new ArrayList<UserEvent>(_list5.size);
          for (int _i6 = 0; _i6 < _list5.size; ++_i6)
          {
            UserEvent _elem7;
            _elem7 = new UserEvent();
            _elem7.read(iprot);
            struct.e.add(_elem7);
          }
        }
        struct.setEIsSet(true);
      }
    }
  }

}

