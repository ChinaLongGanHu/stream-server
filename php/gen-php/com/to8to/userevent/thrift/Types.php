<?php
namespace com\to8to\userevent\thrift;

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


class UserEvent {
  static $_TSPEC;

  public $vt = null;
  public $et = null;
  public $en = null;
  public $vr = null;
  public $ci = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'vt',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'et',
          'type' => TType::I16,
          ),
        3 => array(
          'var' => 'en',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'vr',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'ci',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['vt'])) {
        $this->vt = $vals['vt'];
      }
      if (isset($vals['et'])) {
        $this->et = $vals['et'];
      }
      if (isset($vals['en'])) {
        $this->en = $vals['en'];
      }
      if (isset($vals['vr'])) {
        $this->vr = $vals['vr'];
      }
      if (isset($vals['ci'])) {
        $this->ci = $vals['ci'];
      }
    }
  }

  public function getName() {
    return 'UserEvent';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->vt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->et);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->en);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->vr);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ci);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserEvent');
    if ($this->vt !== null) {
      $xfer += $output->writeFieldBegin('vt', TType::STRING, 1);
      $xfer += $output->writeString($this->vt);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->et !== null) {
      $xfer += $output->writeFieldBegin('et', TType::I16, 2);
      $xfer += $output->writeI16($this->et);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->en !== null) {
      $xfer += $output->writeFieldBegin('en', TType::STRING, 3);
      $xfer += $output->writeString($this->en);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vr !== null) {
      $xfer += $output->writeFieldBegin('vr', TType::STRING, 4);
      $xfer += $output->writeString($this->vr);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ci !== null) {
      $xfer += $output->writeFieldBegin('ci', TType::STRING, 5);
      $xfer += $output->writeString($this->ci);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PutLogReq {
  static $_TSPEC;

  public $uid = null;
  public $ut = null;
  public $sid = null;
  public $ul = null;
  public $ip = null;
  public $osv = null;
  public $ost = null;
  public $pn = null;
  public $pv = null;
  public $ua = null;
  public $ev = null;
  public $st = null;
  public $nt = null;
  public $dt = null;
  public $di = null;
  public $ds = null;
  public $lt = null;
  public $vf = null;
  public $e = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'ut',
          'type' => TType::I16,
          ),
        3 => array(
          'var' => 'sid',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'ul',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'ip',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'osv',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'ost',
          'type' => TType::I16,
          ),
        8 => array(
          'var' => 'pn',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'pv',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'ua',
          'type' => TType::I16,
          ),
        11 => array(
          'var' => 'ev',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'st',
          'type' => TType::I16,
          ),
        13 => array(
          'var' => 'nt',
          'type' => TType::I16,
          ),
        14 => array(
          'var' => 'dt',
          'type' => TType::I16,
          ),
        15 => array(
          'var' => 'di',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'ds',
          'type' => TType::STRING,
          ),
        17 => array(
          'var' => 'lt',
          'type' => TType::STRING,
          ),
        18 => array(
          'var' => 'vf',
          'type' => TType::STRING,
          ),
        19 => array(
          'var' => 'e',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\com\to8to\userevent\thrift\UserEvent',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['ut'])) {
        $this->ut = $vals['ut'];
      }
      if (isset($vals['sid'])) {
        $this->sid = $vals['sid'];
      }
      if (isset($vals['ul'])) {
        $this->ul = $vals['ul'];
      }
      if (isset($vals['ip'])) {
        $this->ip = $vals['ip'];
      }
      if (isset($vals['osv'])) {
        $this->osv = $vals['osv'];
      }
      if (isset($vals['ost'])) {
        $this->ost = $vals['ost'];
      }
      if (isset($vals['pn'])) {
        $this->pn = $vals['pn'];
      }
      if (isset($vals['pv'])) {
        $this->pv = $vals['pv'];
      }
      if (isset($vals['ua'])) {
        $this->ua = $vals['ua'];
      }
      if (isset($vals['ev'])) {
        $this->ev = $vals['ev'];
      }
      if (isset($vals['st'])) {
        $this->st = $vals['st'];
      }
      if (isset($vals['nt'])) {
        $this->nt = $vals['nt'];
      }
      if (isset($vals['dt'])) {
        $this->dt = $vals['dt'];
      }
      if (isset($vals['di'])) {
        $this->di = $vals['di'];
      }
      if (isset($vals['ds'])) {
        $this->ds = $vals['ds'];
      }
      if (isset($vals['lt'])) {
        $this->lt = $vals['lt'];
      }
      if (isset($vals['vf'])) {
        $this->vf = $vals['vf'];
      }
      if (isset($vals['e'])) {
        $this->e = $vals['e'];
      }
    }
  }

  public function getName() {
    return 'PutLogReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->ut);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ul);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->osv);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->ost);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pv);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->ua);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ev);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->st);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->nt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->dt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->di);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ds);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->lt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->vf);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::LST) {
            $this->e = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new \com\to8to\userevent\thrift\UserEvent();
              $xfer += $elem5->read($input);
              $this->e []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PutLogReq');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::STRING, 1);
      $xfer += $output->writeString($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ut !== null) {
      $xfer += $output->writeFieldBegin('ut', TType::I16, 2);
      $xfer += $output->writeI16($this->ut);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sid !== null) {
      $xfer += $output->writeFieldBegin('sid', TType::STRING, 3);
      $xfer += $output->writeString($this->sid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ul !== null) {
      $xfer += $output->writeFieldBegin('ul', TType::STRING, 4);
      $xfer += $output->writeString($this->ul);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ip !== null) {
      $xfer += $output->writeFieldBegin('ip', TType::STRING, 5);
      $xfer += $output->writeString($this->ip);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->osv !== null) {
      $xfer += $output->writeFieldBegin('osv', TType::STRING, 6);
      $xfer += $output->writeString($this->osv);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ost !== null) {
      $xfer += $output->writeFieldBegin('ost', TType::I16, 7);
      $xfer += $output->writeI16($this->ost);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pn !== null) {
      $xfer += $output->writeFieldBegin('pn', TType::STRING, 8);
      $xfer += $output->writeString($this->pn);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pv !== null) {
      $xfer += $output->writeFieldBegin('pv', TType::STRING, 9);
      $xfer += $output->writeString($this->pv);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ua !== null) {
      $xfer += $output->writeFieldBegin('ua', TType::I16, 10);
      $xfer += $output->writeI16($this->ua);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ev !== null) {
      $xfer += $output->writeFieldBegin('ev', TType::STRING, 11);
      $xfer += $output->writeString($this->ev);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->st !== null) {
      $xfer += $output->writeFieldBegin('st', TType::I16, 12);
      $xfer += $output->writeI16($this->st);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nt !== null) {
      $xfer += $output->writeFieldBegin('nt', TType::I16, 13);
      $xfer += $output->writeI16($this->nt);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dt !== null) {
      $xfer += $output->writeFieldBegin('dt', TType::I16, 14);
      $xfer += $output->writeI16($this->dt);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->di !== null) {
      $xfer += $output->writeFieldBegin('di', TType::STRING, 15);
      $xfer += $output->writeString($this->di);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ds !== null) {
      $xfer += $output->writeFieldBegin('ds', TType::STRING, 16);
      $xfer += $output->writeString($this->ds);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lt !== null) {
      $xfer += $output->writeFieldBegin('lt', TType::STRING, 17);
      $xfer += $output->writeString($this->lt);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vf !== null) {
      $xfer += $output->writeFieldBegin('vf', TType::STRING, 18);
      $xfer += $output->writeString($this->vf);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->e !== null) {
      if (!is_array($this->e)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('e', TType::LST, 19);
      {
        $output->writeListBegin(TType::STRUCT, count($this->e));
        {
          foreach ($this->e as $iter6)
          {
            $xfer += $iter6->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


